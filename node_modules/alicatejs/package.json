{
  "name": "alicatejs",
  "main": "app/scripts/main.js",
  "version": "0.0.10",
  "private": false,
  "repository": {
    "type": "git",
    "url": "git://github.com/dryajov/alicatejs.git"
  },
  "dependencies": {
    "body-parser": "~1.12.0",
    "cookie-parser": "~1.3.4",
    "debug": "~2.1.1",
    "express": "~4.12.2",
    "jade": "~1.9.2",
    "jquery": "^2.1.3",
    "lodash": "^3.6.0",
    "morgan": "~1.5.1",
    "page": "^1.6.1",
    "serve-favicon": "~2.2.0",
    "underscore": "^1.8.2",
    "vdom-virtualize": "0.0.6",
    "virtual-dom": "^2.0.1"
  },
  "devDependencies": {
    "browserify": "^5.12.1",
    "browserify-shim": "^3.8.3",
    "connect": "^2.25.9",
    "connect-livereload": "^0.4.0",
    "debowerify": "^0.8.1",
    "gulp": "^3.8.7",
    "gulp-autoprefixer": "^0.0.10",
    "gulp-cache": "^0.2.2",
    "gulp-changed": "^1.0.0",
    "gulp-concat": "^2.3.5",
    "gulp-csso": "^0.2.9",
    "gulp-debug": "^1.0.1",
    "gulp-fingerprint": "^0.3.2",
    "gulp-imagemin": "^1.0.1",
    "gulp-jshint": "^1.8.4",
    "gulp-less": "^3.0.2",
    "gulp-livereload": "^2.1.1",
    "gulp-load-plugins": "^0.6.0",
    "gulp-rename": "^1.2.0",
    "gulp-rev": "^1.1.0",
    "gulp-rimraf": "^0.1.0",
    "gulp-sass": "0.7.1",
    "gulp-size": "^1.1.0",
    "gulp-uglify": "^1.0.1",
    "gulp-util": "^3.0.1",
    "jasmine-core": "^2.2.0",
    "jshint-stylish": "^0.4.0",
    "karma-browserify": "^4.0.0",
    "karma-chrome-launcher": "^0.1.7",
    "karma-jasmine": "^0.3.5",
    "mocha": "^1.21.4",
    "opn": "^1.0.0",
    "partialify": "^3.1.1",
    "should": "^4.0.4",
    "vinyl-source-stream": "^0.1.1"
  },
  "keywords": [
    "alicatejs",
    "logicless templates",
    "templateless web framework",
    "templateless",
    "javascript web framework",
    "web framework",
    "model",
    "view",
    "controler",
    "components",
    "component",
    "client",
    "single page",
    "spa",
    "two-way model",
    "two-way bound model",
    "MVC",
    "model view controler"
  ],
  "readme": "#### NOTE: This is in early alpha stage, not production ready!!!\n\n\n## What is alicatejs?\n![alicatejs](https://raw.githubusercontent.com/dryajov/alicatejs/master/logo.jpg)\n\n\nAlicatejs is a single page, MVC, component oriented javascript framework that aims at eliminating logic in the templates.\n\n### Motivation\nWith the advent of new and evermore complex javascript frameworks, we've seen an explosion of templating engines. I believe\nthat templates are a simplistic solution to a complex problem, and it introduces more problems that it solves.\n\nSome problems with templates are:\n\n- Foreign syntax.\n    - Doesn't integrate well with existing target language and as such is not easily debuggable\n- It's the wrong level of abstraction.\n    - With some templates featuring a complete set of branching statements,\n      your view logic ends up spilled all over the place, making it difficult to\n      follow and maintain\n\n### How does alicatejs solve this problems?\n\nWith alicatejs, all the logic from the template is gone. This is accomplished by attaching behaviors to HTML elements\nand controlling the rendering of the elements from the code. This is in turn accomplished by marking some of the desired elements with\nthe `data-aid` attribute that the framework picks up and makes available in the code as alicatejs components. The components are sufficiently\nabstract as to be able to attach to a range of similar HTML elements, and at the same time sufficiently concrete as to\nnot to allow creating invalid markup.\n\n### Core concepts\n\n##### View\n\nA `View` represents an alicate `Component` that has an unparsed html fragment (logicless template) associated. The `View` initiates the rendering of the components tree.\n\n##### Container\n\nA `Container` is basically a `Component` that is able to hold a colection of other components (including another container such as a `View`, `Container` or `Repeater`). It is possible to add components to it by directly adding them to the `children` array or to by using the `add` method on an existing instance.\n\n##### Component\n\nA `Component` is the building block of the framework, it is a class extended by the rest of the components in the framework. There are a range of components that will attach to a subset of similar html elements.\n\nThese components are:\n\n* Label\n* Input\n* Repeater\n* Button\n* Image\n* Select\n\n##### Model\n\nA `Model` is consumed by components, it provides an interface to interact with external data, it has a `data` property and `get` and `set` methods that access the underlying `data`. `Model`s are two way bound, a change in the model's `data` will trigger an update of the associated `Component` (you have to use the `set` method),  and a change on an __updateble__ html element that the component is associated with, will update the underlying `data` (and all the registered subscribers). It is, what in some other frameworks is considered a **View Model**.\n\n##### Html Fragment (logicless template)\n\nAn html fragment is any html element that is marked with the `data-aid` attribute, this attribute is used by the framework to bind components to the corresponding html elements. Html fragments are compiled into a template store. A template store is a hash object with the key being the template name, and the value, the html fragment to be rendered.\n\nThere is a grunt plugin (_grunt-template-store_) available that will aid with the generation of the template store.\n\n### Hello World in Alicatejs\n\n##### helloworld.html\n```\n    <div data-aid=\"hello\">[THIS WILL BE REPLACED]</div>\n```\n\n##### helloworld.js\n```\n    var $ = require('jquery'),\n        Alicate = require('alicatejs'),\n        Container = Alicate.Container,\n        Label = Alicate.Label,\n        Button = Alicate.Button,\n        Select = Alicate.Select;\n    \n        var app = new AlicateApp({\n            templateStore: templateStore,\n            selector: '#myapp',\n            index: '/helloworld'\n        });\n          \n        app.mount('/helloworld', new View({\n                templateName: 'helloworld.html',\n                children: {\n                    hello: new Label({\n                        id: 'hello',\n                        text: 'Hello World from Alicate!!'\n                        })\n                }\n            })).start();\n\n```\nThe snippet above demonstrates the core concepts of alicate in action.\n\nAn application that will attach it self to the `#myapp` selector, is constructed, using `/helloworld` path as its index page/location. Once we have an application, we can start `mount`ing our views on a desired path, this will allow alicatejs to render the view when the browser navigates to that path. Next a `Label` component is added as a child of the `View`. The `Label` will render the contents of its `text` property to the associated html element. \n\nFor further examples take a look at the [alicatejs_samples](https://github.com/dryajov/alicatejs_samples) repo.\n\n### Why jQuery?\njQuery allows to interact with the DOM without worrying about browser specific quirks, and due to its popularity chances are that it's already deployed to the end user site.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "f04f60edfcc601dcf65dce404c74e7ddfdb65ea9",
  "description": "",
  "bugs": {
    "url": "https://github.com/dryajov/alicatejs/issues"
  },
  "homepage": "https://github.com/dryajov/alicatejs",
  "_id": "alicatejs@0.0.10",
  "scripts": {},
  "_shasum": "8bdf4008371d674a1f2756d4c5ab0da4bf1b121c",
  "_from": "alicatejs@^0.0.10"
}
